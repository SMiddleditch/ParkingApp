import random
import pyodbc
import string
from datetime import datetime, timedelta, time

server_name = 'parkpal-server.database.windows.net'
database_name = 'ParkingDb'
username = 'parkpal-admin'
password = 'Password123'

connection_string = 'Driver={ODBC Driver 17 for SQL Server};Server='+server_name+';Database='+database_name+';UID='+username+';PWD='+password+';Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'

conn = pyodbc.connect(connection_string)

cursor = conn.cursor()

def create_price_Test():
    cursor.execute('''
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[price_test]') AND type in (N'U'))
        BEGIN
            CREATE TABLE [dbo].[price_test](
                [id] [int] IDENTITY(1,1) NOT NULL,
                [price] [float] NOT NULL,
            )
        END
    ''')
    conn.commit()

#create_price_Test()


def create_parking_Test():
    cursor.execute('''
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[parking_test]') AND type in (N'U'))
        BEGIN
            CREATE TABLE [dbo].[parking_test](
                [id] [int] IDENTITY(1,1) NOT NULL,
                [rego] [nvarchar](50) NOT NULL,
                [temp] [float] NOT NULL,
                [humid] [float] NOT NULL,
                [time_entry] [datetime] NOT NULL,
                [time_exit] [datetime] NOT NULL,
                [time_diff] [int] NOT NULL,
                [is_parked] [int] NULL
            )
        END
    ''')
    conn.commit()

#create_parking_Test()


def create_fake_data(year, week, day, temp, humid, entries):
    
    # Find the date of the Monday of the specified week and year
    date = datetime.fromisocalendar(year, week, 1)
    # Add day of the week (0 = Monday, 6 = Sunday)
    date += timedelta(days=day)

    for _ in range(entries):
        # Generate a random time between 8:00 and 22:00
        start = time(8, 0, 0)
        end = time(22, 0, 0)
        random_seconds = random.randint(
            int((datetime.combine(date, start) - datetime(1970,1,1)).total_seconds()),
            int((datetime.combine(date, end) - datetime(1970,1,1)).total_seconds())
        )
        entry_time = datetime.utcfromtimestamp(random_seconds)

        # Generate a random exit time between 1 and 12 hours later, but before 22:00
        min_duration = timedelta(hours=1)
        max_duration = timedelta(hours=12)
        duration = random.uniform(min_duration.total_seconds(), max_duration.total_seconds())
        exit_time = entry_time + timedelta(seconds=duration)

        if exit_time.date() > date.date() or exit_time.time() > time(22, 0, 0):
            exit_time = datetime.combine(date, time(22, 0, 0))

        # Time difference in hours
        time_diff = duration / 3600

        # Generate a random registration number
        rego = ''.join(random.choices(string.ascii_uppercase + string.digits, k=7))

        # Insert the data into the table
        cursor.execute(f"""
            INSERT INTO parking_test 
            (rego, temp, humid, time_entry, time_exit, time_diff, is_parked) 
            VALUES 
            ('{rego}', {temp}, {humid}, '{entry_time.strftime('%Y-%m-%d %H:%M:%S')}', '{exit_time.strftime('%Y-%m-%d %H:%M:%S')}', {time_diff}, 0)
        """)

# year, week, day, temp, humid, entries
# Create entries for the day (remember monday is 0 and this is the third entry made) of the 20th week of 2023 with a temperature of 20 and humidity of 50%
# apr week 14 cold
# create_fake_data(2023, 14, 0, 4, 10, 40) 
# create_fake_data(2023, 14, 1, 9, 20, 50)
# create_fake_data(2023, 14, 2, 6, 10, 30)
# create_fake_data(2023, 14, 3, 5, 20, 40)
# create_fake_data(2023, 14, 4, 6, 10, 70)
# create_fake_data(2023, 14, 5, 7, 20, 90)
# create_fake_data(2023, 14, 6, 3, 10, 20)
# # apr 15 warmer
# create_fake_data(2023, 15, 0, 14, 30, 50) 
# create_fake_data(2023, 15, 1, 10, 20, 30)
# create_fake_data(2023, 15, 2, 13, 30, 50)
# create_fake_data(2023, 15, 3, 15, 40, 30)
# create_fake_data(2023, 15, 4, 14, 30, 80)
# create_fake_data(2023, 15, 5, 8, 10, 100)
# create_fake_data(2023, 15, 6, 11, 20, 40)
# # apr 16 hot
# create_fake_data(2023, 16, 0, 24, 20, 30) 
# create_fake_data(2023, 16, 1, 20, 40, 40)
# create_fake_data(2023, 16, 2, 22, 20, 30)
# create_fake_data(2023, 16, 3, 18, 30, 50)
# create_fake_data(2023, 16, 4, 21, 10, 80)
# create_fake_data(2023, 16, 5, 22, 20, 90)
# create_fake_data(2023, 16, 6, 24, 30, 30)
# # apr 17 cold
# create_fake_data(2023, 17, 0, 4, 10, 30) 
# create_fake_data(2023, 17, 1, 5, 10, 30)
# create_fake_data(2023, 17, 2, 3, 20, 40)
# create_fake_data(2023, 17, 3, 2, 20, 30)
# create_fake_data(2023, 17, 4, 4, 10, 90)
# create_fake_data(2023, 17, 5, 5, 20, 100)
# create_fake_data(2023, 17, 6, 2, 10, 40)
# mar 18 hot
# create_fake_data(2023, 18, 0, 24, 20, 30) 
# create_fake_data(2023, 18, 1, 20, 40, 40)
# create_fake_data(2023, 18, 2, 22, 20, 30)
# create_fake_data(2023, 18, 3, 18, 30, 50)
# create_fake_data(2023, 18, 4, 21, 10, 80)
# create_fake_data(2023, 18, 5, 22, 20, 90)
# create_fake_data(2023, 18, 6, 24, 30, 30)

conn.commit()
cursor.close()
conn.close()    

