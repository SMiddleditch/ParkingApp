import pyodbc
import datetime
import random
# from datetime import datetime as dt

# Connect to the database using Windows authentication
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=LAPTOP-4EHGBCL4;'
                      'Database=your_parking;'
                      'Trusted_Connection=yes;')

# Create a cursor to execute SQL queries
cursor = conn.cursor()

# Function to create the table if it doesn't exist
def create_table():
    cursor.execute('''
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[data_table]') AND type in (N'U'))
        BEGIN
            CREATE TABLE [dbo].[data_table](
                [id] [int] IDENTITY(1,1) NOT NULL,
                [rego] [nvarchar](50) NOT NULL,
                [temp] [float] NOT NULL,
                [humid] [float] NOT NULL,
                [time_entry] [datetime] NOT NULL,
                [time_exit] [datetime] NOT NULL,            
                [time_diff] [float] NOT NULL,
                [total_spaces] [int] NULL
            )
        END
    ''')
    conn.commit()

# Function to insert a new row into the table
def insert_row(rego, temp, humid, time_entry, time_exit):    
    time_diff = get_time_diff(time_entry, time_exit)
    total_spaces = count_matching_times(time_entry, time_exit)
    cursor.execute(
        'INSERT INTO data_table (rego, temp, humid, time_entry, time_exit, time_diff, total_spaces) VALUES (?, ?, ?, ?, ?, ?, ?)',
        (rego, temp, humid, time_entry, time_exit, time_diff, total_spaces)
    )
    conn.commit()

# Function to update an existing row in the table
def update_row(id, rego, temp, humid, time_entry, time_exit):    
    time_diff = get_time_diff(time_entry, time_exit)
    total_spaces = count_matching_times(time_entry, time_exit)
    cursor.execute('UPDATE data_table '
                   'SET rego = ?, '
                   'temp = ?, '
                   'humid = ?, '
                   'time_entry = ?, '
                   'time_exit = ?, '
                   'time_diff = ?, '
                   'total_spaces = ? '
                   'WHERE id = ?',
                   rego, temp, humid, time_entry, time_exit, time_diff, total_spaces, id)
    conn.commit()

# Function to delete an existing row from the table
def delete_row(id):
    cursor.execute('DELETE FROM data_table '
                   'WHERE id = ?', id)
    conn.commit()

# Function to select all rows from the table and print them
def select_all_rows():
    cursor.execute('SELECT * FROM data_table')
    for row in cursor.fetchall():
        print(row)

# Function to generate random test data
def generate_test_data(num_rows):
    for i in range(num_rows):
        rego = f"AB{i:02d}CD"
        temp = round(random.uniform(-10, 50), 1)
        humid = round(random.uniform(0, 100), 1)
        if temp <= 0:
            humid = min(humid, 80)
        time_entry = datetime.datetime.now() - datetime.timedelta(days=random.randint(0, 30), hours=random.randint(0, 23), minutes=random.randint(0, 59), seconds=random.randint(0, 59))
        time_exit = time_entry + datetime.timedelta(hours=random.randint(0, 23), minutes=random.randint(0, 59), seconds=random.randint(0, 59))
        insert_row(rego, temp, humid, time_entry, time_exit)

# Define function to count rows with matching time_entry and time_exit
def count_matching_times(time_entry, time_exit):
    cursor.execute("SELECT COUNT(*) FROM data_table WHERE time_entry>=? AND time_entry<? AND time_exit>?", (time_entry, time_exit, time_entry))
    result = cursor.fetchone()[0]
    return result

# Function to calculate the time difference between two datetime objects in hours and minutes
def get_time_diff(start_time, end_time):
    time_diff = end_time - start_time

    sec = time_diff.total_seconds()
    minutes = sec / 60
    hours = sec / (60 * 60)
    
    # seconds = seconds % 60
    return hours + minutes 

# Create the table if it doesn't exist
create_table()

# Insert a new row
insert_row('NU04TVA', 10.5, 10.5, datetime.datetime(2022, 1, 1), datetime.datetime.now())
insert_row('NU04TVB', 20.5, 10.5, datetime.datetime(2022, 2, 1), datetime.datetime.now())
insert_row('NU04TVC', 30.5, 10.5, datetime.datetime(2022, 3, 1), datetime.datetime.now())
generate_test_data(100)

# Update the row with id 1
update_row(1, 'test string', 1.0, 2.0, datetime.datetime.now(), datetime.datetime.now())

# Delete the row with id 2
delete_row(2)

# Select all rows and print them
select_all_rows()

# Close the cursor and connection
cursor.close()
conn.close()